// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>

namespace llvm {


/*int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}*/


llvm::Function* GenerateInt4Mul(Module* mod) {

 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_0_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_1 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 
 // Function Declarations
 
 Function* func_int4mul_codegen = mod->getFunction("int4mul_codegen");
 if (!func_int4mul_codegen) {
 func_int4mul_codegen = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"int4mul_codegen", mod); 
 func_int4mul_codegen->setCallingConv(CallingConv::C);
 }
 AttributeSet func_int4mul_codegen_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::StackProtect);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_int4mul_codegen_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_int4mul_codegen->setAttributes(func_int4mul_codegen_PAL);
 
 // Global Variable Declarations

 
 // Constant Definitions
 ConstantInt* const_int32_2 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 
 // Global Variable Definitions
 
 // Function Definitions
 
 // Function: int4mul_codegen (func_int4mul_codegen)
 {
  Function::arg_iterator args = func_int4mul_codegen->arg_begin();
  Value* int32_a = &*args;
  args++;
  int32_a->setName("a");
  Value* int32_b = &*args;
  args++;
  int32_b->setName("b");
  
  BasicBlock* label_3 = BasicBlock::Create(mod->getContext(), "",func_int4mul_codegen,0);
  
  // Block  (label_3)
  AllocaInst* ptr_4 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_3);
  ptr_4->setAlignment(4);
  AllocaInst* ptr_5 = new AllocaInst(IntegerType::get(mod->getContext(), 32), "", label_3);
  ptr_5->setAlignment(4);
  StoreInst* void_6 = new StoreInst(int32_a, ptr_4, false, label_3);
  void_6->setAlignment(4);
  StoreInst* void_7 = new StoreInst(int32_b, ptr_5, false, label_3);
  void_7->setAlignment(4);
  LoadInst* int32_8 = new LoadInst(ptr_4, "", false, label_3);
  int32_8->setAlignment(4);
  LoadInst* int32_9 = new LoadInst(ptr_5, "", false, label_3);
  int32_9->setAlignment(4);
  BinaryOperator* int32_10 = BinaryOperator::Create(Instruction::Mul, int32_8, int32_9, "", label_3);
  ReturnInst::Create(mod->getContext(), int32_10, label_3);
  
 }
 
 return func_int4mul_codegen;
}
}
